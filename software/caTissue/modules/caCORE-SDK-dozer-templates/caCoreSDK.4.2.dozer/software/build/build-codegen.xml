<!-- *********************************************************************** -->
<!-- ** PROJECT:   BDA Blueprints Web Application                         ** -->
<!-- *********************************************************************** -->

<project name="caCORE SDK - Codegen" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">

	<property name="root.dir" location="${basedir}/../.." />
	<property name="software.dir" location="${root.dir}/software" />
	<property name="build.dir" location="${software.dir}\build" />
	<property name="modules.dir" location="${software.dir}/modules" />
	<property name="workspace.dir" location="${software.dir}/workspace" />
	<property name="target.dir" location="${software.dir}/target" />
	<property name="target.workspace.dir" location="${target.dir}/workspace" />
	<property name="target.module.dir" location="${target.dir}/modules" />

	<property name="output.dir.location" value="../target/workspace"/>

	<property name="ivy.def.file" location="ivy.xml" />

	
	<property file="project.properties" />

	<property name="project.lib.dir" location="${output.project.dir}/lib" />
	<property name="codegen.compile.lib.dir" location="${project.lib.dir}/codegen-compile" />
	<property name="codegen.runtime.lib.dir" location="${project.lib.dir}/codegen-runtime" />
	<property name="remoteclient.lib.dir" location="${project.lib.dir}/remote-client" />
	<property name="localclient.lib.dir" location="${project.lib.dir}/local-client" />
	<property name="writable.api.lib.dir" location="${project.lib.dir}/writable-api" />
	<property name="writable.api.client.lib.dir" location="${project.lib.dir}/writable-api-client" />
	<property name="grid.jaas.api.lib.dir" location="${project.lib.dir}/grid-jaas" />
	<property name="grid.jaas.api.client.lib.dir" location="${project.lib.dir}/grid-jaas-client" />
	<property name="security.api.lib.dir" location="${project.lib.dir}/security-api" />
	<property name="security.api.client.lib.dir" location="${project.lib.dir}/security-api-client" />
	<property name="system.logging.lib.dir" location="${project.lib.dir}/system-logging" />
	<property name="server-tomcat.lib.dir" location="${project.lib.dir}/server-tomcat" />
	<property name="server-jboss.lib.dir" location="${project.lib.dir}/server-jboss" />
	<property name="ws-client.lib.dir" location="${project.lib.dir}/ws-client" />
	<property name="grid-login-service.lib.dir" location="${project.lib.dir}/grid-login-service" />
	<property name="webapp.lib.dir" location="${project.lib.dir}/webapp" />
		
	<property name="src.java.dir" value="${output.src.dir}" />
	<property name="src.javadoc.dir" value="${output.javadoc.dir}" />
	<property name="systemdoc.dir" value="${src.javadoc.dir}/system" />
	<property name="build.classes.dir" value="${output.classes.dir}" />

	
	<!--
		***********************************************************************
		*** HIDE/SHOW DB CONNECTION PROPERTIES TO BE USED IN HIBERNATE
		CONFIGURATION
		***********************************************************************
	-->
	<condition property="SECURITY_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_SECURITY}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_SECURITY}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="SECURITY_START" value="" else="${xml.comment.start}">
		<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="SECURITY_END" value="" else="${xml.comment.end}">
		<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="INSTANCE_LEVEL_SECURITY_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_INSTANCE_LEVEL_SECURITY}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_INSTANCE_LEVEL_SECURITY}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ATTRIBUTE_LEVEL_SECURITY_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_ATTRIBUTE_LEVEL_SECURITY}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_ATTRIBUTE_LEVEL_SECURITY}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ATTRIBUTE_LEVEL_SECURITY_START" value="" else="${xml.comment.start}">
		<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ATTRIBUTE_LEVEL_SECURITY_END" value="" else="${xml.comment.end}">
		<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="CACHE_PROTECTION_ELEMENTS_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${CACHE_PROTECTION_ELEMENTS}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${CACHE_PROTECTION_ELEMENTS}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="WRITABLE_API_EXTENSION_ENABLED" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_WRITABLE_API_EXTENSION}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_WRITABLE_API_EXTENSION}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="SERVICE_INTERFACE" value="${extension.api.interface}" else="${sdk.api.interface}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="SERVICE_IMPL" value="${extension.api.impl}" else="${sdk.api.impl}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="DAO_IMPL" value="${extension.dao.impl}" else="${sdk.dao.impl}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="SERVICE_METHOD_HELPER" value="${extension.sdk.security.writable.applicationservice.method.impl}" else="${sdk.security.readable.applicationservice.method.impl}">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_WRITABLE_API_EXTENSION_VALIDATOR" value="true" else="false">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="HBM2DDL_START" value="" else="${xml.comment.start}">
		<equals arg1="${HBM2DDL_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="HBM2DDL_END" value="" else="${xml.comment.end}">
		<equals arg1="${HBM2DDL_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="HBM2DDL_TYPE_REVISED" value="${HBM2DDL_TYPE}" else="validate">
		<equals arg1="${DB_DIALECT}" arg2="org.hibernate.dialect.HSQLDialect" casesensitive="false" trim="true" />
	</condition>
	<condition property="WRITABLE_APPLICATION_SERVICE_INTERFACE" value="${extension.api.security}" else="">
		<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_HIBERNATE_VALIDATOR" value="true" else="false">
		<and>
			<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_HIBERNATE_VALIDATOR_START" value="" else="${xml.comment.start}">
		<equals arg1="${ENABLE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_HIBERNATE_VALIDATOR_END" value="" else="${xml.comment.end}">
		<equals arg1="${ENABLE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_LOGICAL_MODEL_VALIDATOR" value="true" else="false">
		<or>
			<equals arg1="${VALIDATE_LOGICAL_MODEL}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${VALIDATE_LOGICAL_MODEL}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_MODEL_MAPPING_VALIDATOR" value="true" else="false">
		<or>
			<equals arg1="${VALIDATE_MODEL_MAPPING}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${VALIDATE_MODEL_MAPPING}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_HIBERNATE_MAPPING_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_HIBERNATE_MAPPING}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_HIBERNATE_MAPPING}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_BEANS_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_BEANS}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_BEANS}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_CASTOR_MAPPING_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_CASTOR_MAPPING}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_CASTOR_MAPPING}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_XSD_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_XSD}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_XSD}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_GENERATE_XSD_WITH_GME_TAGS" value="true" else="false">
		<and>
			<or>
				<equals arg1="${GENERATE_XSD_WITH_GME_TAGS}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GENERATE_XSD_WITH_GME_TAGS}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${ENABLE_XSD_GENERATION}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_GENERATE_XSD_WITH_PERMISSIBLE_VALUES" value="true" else="false">
		<and>
			<or>
				<equals arg1="${GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${ENABLE_XSD_GENERATION}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_GME_TAGS_VALIDATOR" value="true" else="false">
		<and>
			<or>
				<equals arg1="${VALIDATE_GME_TAGS}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${VALIDATE_GME_TAGS}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${ENABLE_XSD_GENERATION}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_GENERATE_XSD_WITH_GME_TAGS}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_VALIDATOR_CFG_TRANSFORMER" value="true" else="false">
		<or>
			<equals arg1="${ENABLE_HIBERNATE_VALIDATOR}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" arg2="true" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_WSDD_GENERATION" value="true" else="false">
		<or>
			<equals arg1="${GENERATE_WSDD}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${GENERATE_WSDD}" arg2="yes" casesensitive="false" trim="true" />
		</or>
	</condition>
	<condition property="ENABLE_CLM_LOGGER_CFG_GENERATION" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_COMMON_LOGGING_MODULE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_COMMON_LOGGING_MODULE}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_CLM_LOGGER_CFG_GENERATION_START" value="" else="${xml.comment.start}">
		<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_CLM_LOGGER_CFG_GENERATION_END" value="" else="${xml.comment.end}">
		<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" casesensitive="false" trim="true" />
	</condition>
	<condition property="ENABLE_EMPTY_INTERCEPTOR_START" value="" else="${xml.comment.start}">
		<and>
			<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="false" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="false" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="ENABLE_EMPTY_INTERCEPTOR_END" value="" else="${xml.comment.end}">
		<and>
			<equals arg1="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" arg2="false" casesensitive="false" trim="true" />
			<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="false" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="GRID_LOGIN_MODULE_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_GRID_LOGIN_MODULE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_GRID_LOGIN_MODULE}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="GRID_LOGIN_MODULE_START" value="${xml.comment.start}" else="">
		<and>
			<not>
				<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="GRID_LOGIN_MODULE_END" value="${xml.comment.end}" else="">
		<and>
			<not>
				<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="CSM_LOGIN_MODULE_ENABLED" value="true" else="false">
		<and>
			<or>
				<equals arg1="${ENABLE_CSM_LOGIN_MODULE}" arg2="true" casesensitive="false" trim="true" />
				<equals arg1="${ENABLE_CSM_LOGIN_MODULE}" arg2="yes" casesensitive="false" trim="true" />
			</or>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	
	<condition property="CSM_LOGIN_MODULE_START" value="${xml.comment.start}" else="">
		<and>
			<not>
				<equals arg1="${CSM_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>
	<condition property="CSM_LOGIN_MODULE_END" value="${xml.comment.end}" else="">
		<and>
			<not>
				<equals arg1="${CSM_LOGIN_MODULE_ENABLED}" arg2="true" casesensitive="false" trim="true" />
			</not>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" casesensitive="false" trim="true" />
		</and>
	</condition>

	<condition property="MODEL_FILE_IN_DIRECTORY" value="${MODEL_FILE_PATH}" else="models/${MODEL_FILE}">
		<isset property="MODEL_FILE_PATH" />
	</condition>

	
	<target name="-replace-templates-filter-tokens" depends="">
		<echo>path == ${MODEL_FILE_PATH} ${MODEL_FILE_IN_DIRECTORY}</echo>
		<filterset id="filtertoken1" begintoken="@" endtoken="@" onmissingfiltersfile="fail">
			<filter token="PROJECT_NAME" value="${PROJECT_NAME}" />
			<filter token="SDK_GRID_LOGIN_SERVICE_NAME" value="${SDK_GRID_LOGIN_SERVICE_NAME}" />
			<filter token="OUTPUTDIR" value="${output.src.dir}" />
			<filter token="VALIDATOR_OUTPUTDIR" value="${output.codegen.config.dir}" />
			<filter token="MODEL_FILE_IN_DIRECTORY" value="${MODEL_FILE_IN_DIRECTORY}" />
			<filter token="MODEL_FILE_TYPE" value="${MODEL_FILE_TYPE}" />
			<filter token="LOGICAL_MODEL" value="${LOGICAL_MODEL}" />
			<filter token="DATA_MODEL" value="${DATA_MODEL}" />
			<filter token="INCLUDE_PACKAGE" value="${INCLUDE_PACKAGE}" />
			<filter token="EXCLUDE_PACKAGE" value="${EXCLUDE_PACKAGE}" />
			<filter token="EXCLUDE_NAME" value="${EXCLUDE_NAME}" />
			<filter token="EXCLUDE_NAMESPACE" value="${EXCLUDE_NAMESPACE}" />
			<filter token="NAMESPACE_PREFIX" value="${NAMESPACE_PREFIX}" />
			
			<filter token="WEBSERVICE_NAME" value="${WEBSERVICE_NAME}" />
			<filter token="VALIDATE_LOGICAL_MODEL" value="${ENABLE_LOGICAL_MODEL_VALIDATOR}" />
			<filter token="VALIDATE_MODEL_MAPPING" value="${ENABLE_MODEL_MAPPING_VALIDATOR}" />
			<filter token="VALIDATE_GME_TAGS" value="${ENABLE_GME_TAGS_VALIDATOR}" />
			<filter token="VALIDATE_WRITABLE_API_EXTENSION" value="${ENABLE_WRITABLE_API_EXTENSION_VALIDATOR}" />
			<filter token="GENERATE_HIBERNATE_MAPPING" value="${ENABLE_HIBERNATE_MAPPING_GENERATION}" />
			<filter token="GENERATE_BEANS" value="${ENABLE_BEANS_GENERATION}" />
			<filter token="GENERATE_CASTOR_MAPPING" value="${ENABLE_CASTOR_MAPPING_GENERATION}" />
			<filter token="GENERATE_XSD" value="${ENABLE_XSD_GENERATION}" />
			<filter token="GENERATE_XSD_WITH_GME_TAGS" value="${ENABLE_GENERATE_XSD_WITH_GME_TAGS}" />
			<filter token="GENERATE_XSD_WITH_PERMISSIBLE_VALUES" value="${ENABLE_GENERATE_XSD_WITH_PERMISSIBLE_VALUES}" />
			<filter token="ENABLE_VALIDATOR_CFG_TRANSFORMER" value="${ENABLE_VALIDATOR_CFG_TRANSFORMER}" />
			<filter token="GENERATE_WSDD" value="${ENABLE_WSDD_GENERATION}" />
			<filter token="ENABLE_HIBERNATE_VALIDATOR" value="${ENABLE_HIBERNATE_VALIDATOR}" />
			<filter token="ENABLE_HIBERNATE_VALIDATOR_START" value="${ENABLE_HIBERNATE_VALIDATOR_START}" />
			<filter token="ENABLE_HIBERNATE_VALIDATOR_END" value="${ENABLE_HIBERNATE_VALIDATOR_END}" />
			<filter token="CADSR_CONNECTION_URL" value="${CADSR_CONNECTION_URL}" />

			<filter token="CSM_PROJECT_NAME" value="${CSM_PROJECT_NAME}" />
			<filter token="INSTANCE_LEVEL_SECURITY_ENABLED" value="${INSTANCE_LEVEL_SECURITY_ENABLED}" />
			<filter token="ATTRIBUTE_LEVEL_SECURITY_ENABLED" value="${ATTRIBUTE_LEVEL_SECURITY_ENABLED}" />
			<filter token="SECURITY_ENABLED" value="${SECURITY_ENABLED}" />
			<filter token="IDENTITY_GENERATOR_TAG" value="${IDENTITY_GENERATOR_TAG}" />
			<filter token="DATABASE_TYPE" value="${DATABASE_TYPE}" />
			<filter token="SERVICE_INTERFACE" value="${SERVICE_INTERFACE}" />
			<filter token="SERVICE_IMPL" value="${SERVICE_IMPL}" />
			<filter token="DAO_IMPL" value="${DAO_IMPL}" />
			<filter token="HBM2DDL_TYPE" value="${HBM2DDL_TYPE_REVISED}" />
			<filter token="SERVICE_METHOD_HELPER" value="${SERVICE_METHOD_HELPER}" />
			<filter token="CACHE_PROTECTION_ELEMENTS_ENABLED" value="${CACHE_PROTECTION_ELEMENTS_ENABLED}" />
			<filter token="GENERATE_CLM_LOGGER_CFG" value="${ENABLE_CLM_LOGGER_CFG_GENERATION}" />
			<filter token="READABLE_APPLICATION_SERVICE_INTERFACE" value="${sdk.api.interface}" />
			<filter token="WRITABLE_APPLICATION_SERVICE_INTERFACE" value="${WRITABLE_APPLICATION_SERVICE_INTERFACE}" />
			<filter token="ENABLE_EMPTY_INTERCEPTOR_START" value="${ENABLE_EMPTY_INTERCEPTOR_START}" />
			<filter token="ENABLE_EMPTY_INTERCEPTOR_END" value="${ENABLE_EMPTY_INTERCEPTOR_END}" />
			<filter token="ATTRIBUTE_LEVEL_SECURITY_START" value="${ATTRIBUTE_LEVEL_SECURITY_START}" />
			<filter token="ATTRIBUTE_LEVEL_SECURITY_END" value="${ATTRIBUTE_LEVEL_SECURITY_END}" />
			<filter token="ENABLE_CLM_LOGGER_CFG_GENERATION_START" value="${ENABLE_CLM_LOGGER_CFG_GENERATION_START}" />
			<filter token="ENABLE_CLM_LOGGER_CFG_GENERATION_END" value="${ENABLE_CLM_LOGGER_CFG_GENERATION_END}" />
			
			<filter token="HIBERNATE_SHOW_SQL" value="${HIBERNATE_SHOW_SQL}" />
			
			<filter token="CAGRID_LOGIN_MODULE_NAME" value="${CAGRID_LOGIN_MODULE_NAME}" />
			
		</filterset>
		<filterset id="filtertoken2" begintoken="${xml.comment.start}@" endtoken="@${xml.comment.end}" onmissingfiltersfile="fail">
			<filter token="SECURITY_START" value="${SECURITY_START}" />
			<filter token="SECURITY_END" value="${SECURITY_END}" />
			<filter token="HBM2DDL_START" value="${HBM2DDL_START}" />
			<filter token="HBM2DDL_END" value="${HBM2DDL_END}" />
			<filter token="GRID_LOGIN_MODULE_START" value="${GRID_LOGIN_MODULE_START}" />
			<filter token="GRID_LOGIN_MODULE_END" value="${GRID_LOGIN_MODULE_END}" />
			<filter token="CSM_LOGIN_MODULE_START" value="${CSM_LOGIN_MODULE_START}" />
			<filter token="CSM_LOGIN_MODULE_END" value="${CSM_LOGIN_MODULE_END}" />
		</filterset>
	</target>	
	<target name="replacetoken-contents-preconfigure" depends="-replace-templates-filter-tokens">

		<delete dir="${output.codegen.config.dir}"/>
		<delete dir="${system.config.template.dir}"/>

		<copy todir="${output.codegen.config.dir}" filtering="true">
			<fileset dir="${codegen.config.dir}" />
			<globmapper from="*-template.xml" to="*.xml" />
			<filterset refid="filtertoken1" />
			<filterset refid="filtertoken2" />
		</copy>
		<copy todir="${output.codegen.config.dir}">
			<fileset dir="${codegen.config.dir}">
				<include name="**/*.*" />
				<exclude name="**/*-template*.*" />
			</fileset>
		</copy>
		
		<copy todir="${system.config.template.dir}" filtering="true">
			<fileset dir="${system.orig.config.dir}" />
			<filterset refid="filtertoken1" />
			<filterset refid="filtertoken2" />
		</copy>
	</target>
		

	<target name="replacetoken-contents" depends="replacetoken-contents-preconfigure"/>
	
	
	<!-- ******************************************************************* -->
	<!-- ** CODEGEN TARGETS                                                  ** -->
	<!-- ******************************************************************* -->

	<path id="project.compile.classpath">
		<fileset dir="${codegen.compile.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${output.conf.dir}" />
	</path>

	<path id="codegen.runtime.classpath">
		<fileset dir="${codegen.runtime.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${output.codegen.config.dir}" />
		<pathelement path="${output.codegen.validator.config.dir}" />
	</path>

	<target name="-pre-clean">
		<delete dir="${build.classes.dir}" quiet="true" />
		<delete file="${target.dir}/${jar.name}" quiet="false" />
	</target>

	<target name="-init" depends="-pre-clean">
		<mkdir dir="${src.java.dir}" />
		<mkdir dir="${src.javadoc.dir}" />
	</target>

	<target name="ivy:setup:codegen" depends="ivy:setup:codegen:runtime, 
		ivy:setup:codegen:compile" description="Updates the local ivy repository for all build and test dependencies." />

	<target name="ivy:setup:codegen:runtime" depends="ivy:init">
		<ivy:resolve refresh="true" conf="codegen-runtime" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="codegen-runtime" />
	</target>

	<target name="ivy:setup:codegen:compile" depends="ivy:init">
		<ivy:resolve refresh="true" conf="codegen-compile" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="codegen-compile" />
	</target>

	<target name="-compile:application-code" depends="-init, ivy:setup:codegen:compile,-generate-codegen" description="Compiles all subproject code">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${codegen.compile.lib.dir}" />
		<javac srcdir="${src.java.dir}" destdir="${build.classes.dir}" debug="true">
			<classpath refid="project.compile.classpath" />
		</javac>
	</target>

	<target name="-package-bean-jar" depends="-compile:application-code,-generate-codegen" description="Prepares Java Beans distribution files">
		<mkdir dir="${output.target.dir}" />
		<jar destfile="${output.target.dir}\${bean.file}" basedir="${build.classes.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
				<attribute name="Version" value="${VERSION}" />
			</manifest>
			<fileset dir="${src.java.dir}" includes="**/*.java" />
		</jar>
	</target>

	<target name="-package-orm-jar" depends="-generate-codegen" description="Prepares ORM distribution files">
		<mkdir dir="${output.target.dir}" />
		<jar destfile="${output.target.dir}\${orm.file}" basedir="${src.java.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
				<attribute name="Version" value="${VERSION}" />
			</manifest>
			<include name="**/*.hbm.xml" />
			<include name="*.cfg.xml" />
			<include name="ehcache.xml" />
			<exclude name="${csm.security.config.file}" />
		</jar>
	</target>

	<target name="-package-dozer-jar" depends="-generate-codegen" description="Prepares Dozer distribution files">
		<mkdir dir="${output.target.dir}" />
		<jar destfile="${output.target.dir}\${dozer.file}" basedir="${src.java.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
				<attribute name="Version" value="${VERSION}" />
			</manifest>
			<include name="DozerBeanMapping.xml" />
			<include name="genericCustomConverterSets.properties" />
			<include name="genericCustomConverterParentRef.properties" />
		</jar>
	</target>

	<target name="-package-xml-jar" depends="-generate-codegen" description="Prepares XML distribution files">
		<mkdir dir="${output.target.dir}" />
		<jar destfile="${output.target.dir}\${schema.file}" basedir="${src.java.dir}">
			<manifest>
				<attribute name="Generated-By" value="caCORE SDK Code Generator" />
				<attribute name="Version" value="${VERSION}" />
			</manifest>
			<include name="**/*.xsd" />
			<include name="unmarshaller-xml-mapping.xml" />
			<include name="xml-mapping.xml" />
			<exclude name="server-config.wsdd" />
		</jar>
	</target>

	<target name="-package-codegen-artifacts" depends="-package-bean-jar,-package-orm-jar,-package-xml-jar,-package-dozer-jar" description="Prepares distribution files">
	</target>


	<target name="-generate-codegen" depends="replacetoken-contents,ivy:setup:codegen,-generate-codegen-validator" description="Runs the Code Generator">
		<echo>${ant.project.name}: Running the Code Generator</echo>
		<fail unless="IDENTITY_GENERATOR_TAG">IDENTITY_GENERATOR property must be set in codegen.properties</fail>
		<java classname="gov.nih.nci.codegen.Generator" failonerror="true" fork="true" >
			<arg value="${codegen.config.file}" />
			<jvmarg value="-Xms256M" />
			<jvmarg value="-Xmx512M" />
			<classpath refid="codegen.runtime.classpath" />
		</java>
	</target>
	
	<target name="-generate-codegen-validator" description="Runs the Hibernate Validator Code Generator">
		<echo>${ant.project.name}: Running the Hibernate Validator Code Generator</echo>
		<java classname="gov.nih.nci.codegen.Generator" failonerror="true" fork="true" >
			<arg value="${codegen.config.validator.file}" />
			<jvmarg value="-Xms256M" />
			<jvmarg value="-Xmx512M" />
			<classpath refid="codegen.runtime.classpath" />
		</java>
	</target>
	
	<target name="-codegen-doc" description="Generates javadocs for the domain Java beans">
		<javadoc packagenames="*" destdir="${src.javadoc.dir}" author="true"
			private="true" version="true" use="true" windowtitle="${PROJECT_NAME} API Documentation"
			doctitle="${PROJECT_NAME} API Documentation" useexternalfile="yes" verbose="false">
			<classpath refid="codegen.runtime.classpath" />
		    <bottom><![CDATA[<i>This API was generated by the <a href='http://ncicb.nci.nih.gov/NCICB/infrastructure/cacoresdk'>caCORE Software Development Kit</a>.</i>]]></bottom>
			<fileset dir="${src.java.dir}" includes="**/*.java"/>
		</javadoc>
	</target>
	
	<target name="-system-doc" description="Generates javadocs for the entire system">
		<javadoc packagenames="*" destdir="${systemdoc.dir}" author="true"
			private="true" version="true" use="true" windowtitle="${VERSION} API Documentation"
			doctitle="${VERSION} API Documentation" useexternalfile="yes" verbose="false" failonerror="false">
		    <bottom><![CDATA[<i>This System API was generated by the <a href='http://ncicb.nci.nih.gov/NCICB/infrastructure/cacoresdk'>caCORE Software Development Kit</a>.</i>]]></bottom>
			<fileset dir="${modules.dir}" includes="**/*.java"/>
		</javadoc>
	</target>

	<target name="post-clean">
		<delete dir="${build.classes.dir}" quiet="false" />
	</target>

	
	<target name="build:all" depends="-pre-clean,-init,-generate-codegen,-package-codegen-artifacts,-codegen-doc,-system-doc,ivy:publish,post-clean" description="Default target">
	</target>

	
	<!-- ******************************************************************* -->
	<!-- ** PACKAGING TARGETS                                                  ** -->
	<!-- ******************************************************************* -->
	<target name="ivy:init">
		<property name="ivy.dep.file" value="${ivy.def.file}" />
		<ivy:settings file="${ivy.settings.dir}/${ivy.settings.file}"/>
	</target>

	<target name="ivy:publish" description="--> publish this project in the ivy repository">
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss" />
		</tstamp>
		<property name="version" value="${sdk.version}" />
		<ivy:publish artifactspattern="${target.module.dir}/${module.name}/lib/[artifact].[ext]" resolver="shared-local-repo"  
			pubrevision="${version}" status="release" forcedeliver="true" pubdate="${now}" update="true" overwrite="true" />
	</target>
	
	<target name="ivy:package-drivers" depends="ivy:init">
		<ivy:resolve refresh="true" conf="drivers" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="drivers" />
	</target>

	
	<target name="ivy:package-remote-client" depends="ivy:init,ivy:package-writable-api">
		<ivy:resolve refresh="true" conf="remote-client" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="remote-client" />
	</target>

	<target name="ivy:package-local-client" depends="ivy:init,ivy:package-writable-api">
		<ivy:resolve refresh="true" conf="local-client" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="local-client" />
	</target>

	<target name="ivy:package-writable-api" depends="ivy:init">
		<if>
			<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" />
			<then>
				<ivy:resolve refresh="true" conf="writable-api" />
				<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="writable-api" />
			</then>
		</if>
	</target>

	<target name="ivy:package-system-logging" depends="ivy:init">
		<if>
			<equals arg1="${ENABLE_CLM_LOGGER_CFG_GENERATION}" arg2="true" />
			<then>
				<ivy:resolve refresh="true" conf="system-logging" />
				<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="system-logging" />
			</then>
		</if>
	</target>

	<target name="ivy:package-writable-client-api" depends="ivy:init">
		<if>
			<equals arg1="${WRITABLE_API_EXTENSION_ENABLED}" arg2="true" />
			<then>
				<ivy:resolve refresh="true" conf="writable-api-client" />
				<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="writable-api-client" />
			</then>
		</if>
	</target>

	<target name="ivy:package-security-api" depends="ivy:init">
		<if>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" />
			<then>
				<ivy:resolve refresh="true" conf="security-api" />
				<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="security-api" />
			</then>
		</if>
	</target>

	<target name="ivy:package-security-client-api" depends="ivy:init">
		<if>
			<equals arg1="${SECURITY_ENABLED}" arg2="true" />
			<then>
				<ivy:resolve refresh="true" conf="security-api-client" />
				<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="security-api-client" />
			</then>
		</if>
	</target>

	<target name="ivy:package-grid-jaas-client-api" depends="ivy:init">
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" />
			<then>
				<ivy:resolve refresh="true" conf="grid-jaas-client" />
				<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="grid-jaas-client" />
			</then>
		</if>
	</target>

	<target name="ivy:package-grid-jaas-api" depends="ivy:init">
		<if>
			<equals arg1="${GRID_LOGIN_MODULE_ENABLED}" arg2="true" />
			<then>
				<ivy:resolve refresh="true" conf="grid-jaas" />
				<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="grid-jaas" />
			</then>
		</if>
	</target>

	<target name="ivy:package-webapp" depends="ivy:init">
		<ivy:resolve refresh="true" conf="webapp" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="webapp" />
	</target>

	<target name="ivy:package-server-tomcat" depends="ivy:init">
		<ivy:resolve refresh="true" conf="server-tomcat" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="server-tomcat" />
	</target>

	<target name="ivy:package-server-jboss" depends="ivy:init">
		<ivy:resolve refresh="true" conf="server-jboss" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="server-jboss" />
	</target>

	<target name="ivy:package-ws-client" depends="ivy:init">
		<ivy:resolve refresh="true" conf="ws-client" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="ws-client" />
	</target>

	<target name="ivy:package-grid-login-service" depends="ivy:init">
		<ivy:resolve refresh="true" conf="grid-login-service" />
		<ivy:retrieve pattern="${project.lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="grid-login-service" />
	</target>

	<!-- ******************************************************************* -->
	<!-- ** MAIN TARGETS                                                  ** -->
	<!-- ******************************************************************* -->

	<target name="clean:dependencies">
		<delete dir="${localclient.lib.dir}" />
		<delete dir="${remoteclient.lib.dir}" />
		<delete dir="${writable.api.lib.dir}" />
		<delete dir="${writable.api.client.lib.dir}" />
		<delete dir="${grid.jaas.api.lib.dir}" />
		<delete dir="${grid.jaas.api.client.lib.dir}" />
		<delete dir="${security.api.lib.dir}" />
		<delete dir="${security.api.client.lib.dir}" />
		<delete dir="${webapp.lib.dir}" />
		<delete dir="${ws-client.lib.dir}" />
		<delete dir="${system.logging.lib.dir}" />
		<delete dir="${grid-login-service.lib.dir}" />
		<delete dir="${server-tomcat.lib.dir}" />
		<delete dir="${server-jboss.lib.dir}" />
	</target>

	<target name="dist" description="target to package-system">
		<copy todir="${dist.exploded.dir}">
			<fileset dir="${basedir}" >
				<include name="*-reconfigure.xml"/>
				<include name="*-taskdef.xml"/>
				<include name="*.properties"/>
				<include name="tools/**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="package-system" depends="package-drivers,package-remote-client,package-local-client,package-ws-client,package-server,-package-web,-build-grid-login-service-war,dist" description="Packages the system"/>
	<target name="package-drivers" depends="ivy:package-drivers"/>
	<target name="package-local-client" depends="-package-local-client-core,-package-local-client-writable-api,-package-local-client-security,-package-local-client-grid-security,-package-system-logging" />
	<target name="-package-local-client-core" depends="ivy:package-local-client"/>
	<target name="-package-local-client-writable-api" depends="ivy:package-writable-api"/>
	<target name="-package-system-logging" depends="ivy:package-system-logging"/>
	<target name="-package-local-client-security" depends="ivy:package-security-api"/>
	<target name="-package-local-client-grid-security" depends="ivy:package-grid-jaas-api"/>
	<target name="package-remote-client" depends="-package-remote-client-core,-package-remote-client-writable-api,-package-remote-client-security,-package-remote-client-grid-security" />
	<target name="-package-remote-client-core" depends="ivy:package-remote-client"/>
	<target name="-package-remote-client-writable-api" depends="ivy:package-writable-client-api"/>
	<target name="-package-remote-client-security" depends="ivy:package-security-client-api"/>
	<target name="-package-remote-client-grid-security" depends="ivy:package-grid-jaas-client-api"/>
	<target name="-staging-war" depends="ivy:package-writable-api,ivy:package-system-logging,ivy:package-security-api,ivy:package-grid-jaas-client-api"/>
	<target name="-build-project-war" depends="ivy:package-webapp,-staging-war"/>
	<target name="package-ws-client" depends="ivy:package-ws-client"/>
	<target name="-package-tomcat-server" depends="ivy:package-server-tomcat"/>
	<target name="-package-jboss-server" depends="ivy:package-server-jboss"/>
	<target name="package-server" depends="ivy:package-webapp,-package-tomcat-server,-package-jboss-server">
	</target>	

	<target name="-package-web">
		<mkdir dir="${output.project.dir}/web"/>
		<copy todir="${output.project.dir}/web">
			<fileset dir="${workspace.dir}/web">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="-build-grid-login-service-war" depends="ivy:package-grid-login-service"/>

</project>
