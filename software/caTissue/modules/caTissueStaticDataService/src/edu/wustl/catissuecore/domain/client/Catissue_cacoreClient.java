package edu.wustl.catissuecore.domain.client;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.wsrf.encoding.ObjectSerializer;
import org.globus.gsi.*;

import org.cagrid.cql.utilities.CQL1toCQL2Converter;
import org.cagrid.cql.utilities.CQL2SerializationUtil;

import edu.wustl.catissuecore.domain.common.Catissue_cacoreI;
import edu.wustl.catissuecore.domain.service.Catissue_cacoreConfiguration;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.DataServiceConstants;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.metadata.MetadataUtils;
import gov.nih.nci.cagrid.metadata.dataservice.DomainModel;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 * <p/>
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 * <p/>
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.4
 */
public class Catissue_cacoreClient extends Catissue_cacoreClientBase implements Catissue_cacoreI {

    public Catissue_cacoreClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public Catissue_cacoreClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
    }

    public Catissue_cacoreClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }

    public Catissue_cacoreClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr, proxy);
    }

    public static void usage() {
        System.out.println(Catissue_cacoreClient.class.getName() + " -url <service url>");
    }

    @SuppressWarnings("deprecation")
    public static void main(String[] args) {

        System.out.println("Running the Grid Service Client");

/*
        try {
            ClientRunAll.client = new Catissue_cacoreClient(args[1], ClientRunAll.getGlobusCredential());
            ClientRunAll.createParticipantAndCPR();
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (GlobusCredentialException e) {
            e.printStackTrace();
        } catch (MalformedURIException e) {
            e.printStackTrace();
        }

        if (true) return;
*/

        try {
            if (args.length == 3) {
                if (args[0].equals("-url")) {
                    String url = args[1];

                    Catissue_cacoreClient client;
                    GlobusCredential cred = null;
                    if (url.startsWith("https")) {
                        cred = GlobusCredential.getDefaultCredential();
                        if (cred != null) {
                            System.out.println("Identity =" + cred.getIdentity());
                        }

                        client = new Catissue_cacoreClient(url, cred);
                    } else {
                        client = new Catissue_cacoreClient(url);
                    }

                    // get query from file
                    for (int i = 2; i < args.length; i++) {
                        String cqlFileName = args[i];
                        System.out.println("Running query: " + cqlFileName);
                        try {
                            String strQuery = client.readQueryFile(cqlFileName);

                            // If this is a CQL1 query...
                            if (strQuery.contains("gov.nih.nci.cagrid.CQLQuery")) {
                                CQLQuery cql1Query = (CQLQuery) Utils.deserializeDocument(cqlFileName, CQLQuery.class);

                                // display as CQL2
                                EndpointReferenceType epr = new EndpointReferenceType(new Address(url));
                                DomainModel domainModel = MetadataUtils.getDomainModel(epr);
                                CQL1toCQL2Converter converter = new CQL1toCQL2Converter(domainModel);
                                org.cagrid.cql2.CQLQuery cql2Query = converter.convertToCql2Query(cql1Query);
                                System.out.println("As CQL2Query = " + CQL2SerializationUtil.serializeCql2Query(cql2Query));

                                CQLQueryResults cqlQueryResult = client.query(cql1Query);

                                StringWriter sw = new StringWriter();
                                Utils.serializeObject(cqlQueryResult, DataServiceConstants.CQL_RESULT_COLLECTION_QNAME, sw);
                                System.out.println("CQL1 Results:\n" + sw.toString());
                            }
                            // else, it's CQL2
                            else {
                                org.cagrid.cql2.CQLQuery cql2Query = CQL2SerializationUtil.deserializeCql2Query(strQuery);

                                System.out.println("CQL2Query = " + CQL2SerializationUtil.serializeCql2Query(cql2Query));

                                org.cagrid.cql2.results.CQLQueryResults cqlQueryResult = client.executeQuery(cql2Query);
                                System.out.println("cqlQueryResult = " + cqlQueryResult);
                                // write the results
                                StringWriter sw = new StringWriter();
                                CQL2SerializationUtil.serializeCql2QueryResults(cqlQueryResult, sw);
                                System.out.println("CQL2 Results:\n" + sw.toString());
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private String readQueryFile(String filename) {
        StringBuilder contents = new StringBuilder();

        BufferedReader input;
        try {
            input = new BufferedReader(new FileReader(filename));
            String line = null;

            while ((line = input.readLine()) != null) {
                contents.append(line);
                contents.append(System.getProperty("line.separator"));
            }
        } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return contents.toString();

    }

    private static void printResults(CQLQueryResults cqlQueryResult) {
        CQLQueryResultsIterator iter = new CQLQueryResultsIterator(cqlQueryResult, true);
        if (!iter.hasNext()) {
            System.out.println("No Result Found");
        }
        while (iter.hasNext()) {
            System.out.println("\n" + iter.next());
        }
        /*java.util.Iterator iter = new CQLQueryResultsIterator(cqlQueryResult,
                  CaTissueSuiteClient.class.getResourceAsStream("client-config.wsdd"));
          while (iter.hasNext())
          {
              Participant g = (Participant) iter.next();
              System.out.println("Found a gene:");
              System.out.println(g.getId() + " -- " +  g.getObjectId());
          }*/

    }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

  public org.cagrid.cql2.results.CQLQueryResults executeQuery(org.cagrid.cql2.CQLQuery query) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"executeQuery");
    org.cagrid.dataservice.ExecuteQueryRequest params = new org.cagrid.dataservice.ExecuteQueryRequest();
    org.cagrid.dataservice.ExecuteQueryRequestQuery queryContainer = new org.cagrid.dataservice.ExecuteQueryRequestQuery();
    queryContainer.setCQLQuery(query);
    params.setQuery(queryContainer);
    org.cagrid.dataservice.ExecuteQueryResponse boxedResult = portType.executeQuery(params);
    return boxedResult.getCQLQueryResults();
    }
  }

  public edu.wustl.common.domain.ws.AbstractDomainObject insert(edu.wustl.common.domain.ws.AbstractDomainObject object) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"insert");
    edu.wustl.catissuecore.domain.stubs.InsertRequest params = new edu.wustl.catissuecore.domain.stubs.InsertRequest();
    edu.wustl.catissuecore.domain.stubs.InsertRequestObject objectContainer = new edu.wustl.catissuecore.domain.stubs.InsertRequestObject();
    objectContainer.setAbstractDomainObject(object);
    params.setObject(objectContainer);
    edu.wustl.catissuecore.domain.stubs.InsertResponse boxedResult = portType.insert(params);
    return boxedResult.getAbstractDomainObject();
    }
  }

  public edu.wustl.common.domain.ws.AbstractDomainObject update(edu.wustl.common.domain.ws.AbstractDomainObject object) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    edu.wustl.catissuecore.domain.stubs.UpdateRequest params = new edu.wustl.catissuecore.domain.stubs.UpdateRequest();
    edu.wustl.catissuecore.domain.stubs.UpdateRequestObject objectContainer = new edu.wustl.catissuecore.domain.stubs.UpdateRequestObject();
    objectContainer.setAbstractDomainObject(object);
    params.setObject(objectContainer);
    edu.wustl.catissuecore.domain.stubs.UpdateResponse boxedResult = portType.update(params);
    return boxedResult.getAbstractDomainObject();
    }
  }

  public edu.wustl.common.domain.ws.AbstractDomainObject disable(edu.wustl.common.domain.ws.AbstractDomainObject object) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"disable");
    edu.wustl.catissuecore.domain.stubs.DisableRequest params = new edu.wustl.catissuecore.domain.stubs.DisableRequest();
    edu.wustl.catissuecore.domain.stubs.DisableRequestObject objectContainer = new edu.wustl.catissuecore.domain.stubs.DisableRequestObject();
    objectContainer.setAbstractDomainObject(object);
    params.setObject(objectContainer);
    edu.wustl.catissuecore.domain.stubs.DisableResponse boxedResult = portType.disable(params);
    return boxedResult.getAbstractDomainObject();
    }
  }

}
